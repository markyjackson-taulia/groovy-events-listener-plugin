apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'java'

idea.project?.vcs = 'Git'

ext {
    /* optional - set variable enforceJavaVersion */
    enforceVersionFlag = project.getProperties().containsKey('enforceJavaVersion')
    javaVersion = project.getProperties().get('enforceJavaVersion') ?: JavaVersion.VERSION_1_6
    compileTasks = [compileJava, compileTestJava, compileGroovy, compileTestGroovy]
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    mavenCentral()
}

ext {
    groovyVersion = '2.4.8'
    customJvmArgs = ['-Xmx128m']
}

wrapper {
    gradleVersion = '6.0.1'
}

allprojects {
    clean {
        delete 'work'
        delete '.gradle'
    }

    tasks.withType(JavaCompile) {
        options.fork = true
        options.forkOptions.jvmArgs += customJvmArgs
    }

    tasks.withType(GroovyCompile) {
        configure(groovyOptions.forkOptions) {
            memoryMaximumSize = '256m'
            jvmArgs = customJvmArgs
        }
    }

    tasks.withType(Test) {
        jvmArgs(customJvmArgs)
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

subprojects {
    apply from: "$rootDir/gradle/idea.gradle"
}

tasks.register('enforceVersion') {
    doLast {
        if (enforceVersionFlag) {
            def foundVersion = JavaVersion.current()
            if (foundVersion != enforceJavaVersion) {
                throw new IllegalStateException("Wrong Java version; required is $enforceJavaVersion, but found $foundVersion")
            }
        }
    }
}

compileTasks*.dependsOn('enforceVersion')

tasks.register('showMeCache') {
    doLast {
        configurations.compile.each { println it }
    }
}
